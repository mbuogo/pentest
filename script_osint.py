#!/usr/bin/env python3

import sys
import os
import shutil
import subprocess
import json
import re
import socket
import requests
import time
import censys.ipv4
import censys.data
import xml.etree.ElementTree as ET
from pyhunter import PyHunter

baseAPIURL = 'https://haveibeenpwned.com/api/v3/'
apikey = 'xxxxx'
headers_pwned = {'hibp-api-key': apikey}
urlEndpoint = 'breachedaccount/'
dominio = sys.argv[1]
dic_amass = {}
dic_rdap = {}
dic_nmap = {}
dic_nmapbloco = {}
dic_names = {}
dic = {}

log_osint = open('log_osint.txt', 'w')

def gowitness(address,port):

    subprocess.check_output('/root/go/bin/gowitness single -F http://'+address+':'+str(port)+' || true', shell=True)
    subprocess.check_output('/root/go/bin/gowitness single -F https://'+address+':'+str(port)+' || true', shell=True)

def rdap_enumeration(address,name):
    if(address != '127.0.0.1'):
        rdap = subprocess.check_output("sudo /root/go/bin/rdap "+address+" -j || true", shell=True)
        parse_rdap = json.loads(rdap)
        dic_rdap['blocoip'] = parse_rdap['handle']
        if(dic_rdap['blocoip'] not in dic_nmapbloco):
            dic_nmapbloco[dic_rdap['blocoip']] = dic_rdap['blocoip']
        try:
            dic_rdap['asnblocoip'] = parse_rdap['nicbr_autnum']
        except:
            dic_rdap['asnblocoip'] = ''
        saida = '\n\n--> Name: '+name
        log_osint.write(saida)
        saida = '\nIP:'+address+' BlocoIP:'+dic_rdap['blocoip']+' ASN:'+str(dic_rdap['asnblocoip'])
        log_osint.write(saida)


def escrita_log (tool):
    if(tool == 'amass'):
        with open('log_amass.json') as file:
            for line in file:
                parse_amass = json.loads(line)
                dic_amass['name'] = parse_amass['name']
                gowitness(dic_amass['name'],'443')
                gowitness(dic_amass['name'],'80')
                for x in parse_amass['addresses']:
                    dic_amass['ip'] = x['ip']
                    if(x['ip'] not in dic_nmap):
                        dic_nmap[x['ip']] = x['ip'] 
                        rdap_enumeration(dic_amass['ip'],dic_amass['name'])

    elif(tool == 'sublist3r'):
        with open('sublist3r.log') as file:
            for line in file:
                gowitness(line.rstrip('\n'),'443')
                gowitness(line.rstrip('\n'),'80')
                try:
                    ip = socket.gethostbyname(line.rstrip('\n'))
                    if(ip not in dic_nmap):
                        dic_nmap[ip] = ip
                        rdap_enumeration(ip,line.rstrip('\n'))
                except:
                    pass

    elif(tool == 'subfinder'):
        with open('subfinder.log') as file:
            for line in file:
                gowitness(line.rstrip('\n'),'443')
                gowitness(line.rstrip('\n'),'80')
                try:
                    ip = socket.gethostbyname(line.rstrip('\n'))
                    if(ip not in dic_nmap):
                        dic_nmap[ip] = ip
                        rdap_enumeration(ip,line.rstrip('\n'))
                except:
                    pass
    elif(tool == 'censys'):
        c = censys.ipv4.CensysIPv4()
        for page in c.search(dominio):
            if(page['ip'] not in dic_nmap and page['ip'] != '127.0.0.1'):
                dic_nmap[page['ip']] = page['ip']
                rdap = subprocess.check_output("sudo /root/go/bin/rdap "+page['ip']+" -j || true", shell=True)
                parse_rdap = json.loads(rdap)
                dic_rdap['blocoip'] = parse_rdap['handle']
                if(dic_rdap['blocoip'] not in dic_nmapbloco):
                    dic_nmapbloco[dic_rdap['blocoip']] = dic_rdap['blocoip']

def blocosips_escrita():
    cont = 0
    saida = '\n\n>> IPs e Blocos IPs\n'
    log_osint.write(saida)
    for i in dic_nmap:
        cont = cont + 1
        saida = '\nIP: '+i
        log_osint.write(saida)
    saida = '\n>> Total de IPs: '+str(cont)
    log_osint.write(saida)

    for i in dic_nmapbloco:
        saida = '\nBLOCO IP: '+i
        log_osint.write(saida)

def enumeracao_dns(domain):

    print("\033[32m"+"[+] AMASS | RDAP Execution"+"\033[0;0m"+"\n")
    subprocess.check_output("sudo amass enum -ip -d "+domain+" -brute -json log_amass.json || true", shell=True)
    escrita_log('amass')
    print("\033[32m"+"[+] SUBLIST3R"+"\033[0;0m"+"\n")
    subprocess.check_output("sudo python3 /opt/Sublist3r/sublist3r.py -d "+domain+" -o sublist3r.log || true", shell=True)
    escrita_log('sublist3r')
    print("\033[32m"+"[+] SUBFINDER"+"\033[0;0m"+"\n")
    subprocess.check_output("sudo subfinder -d "+domain+" -o subfinder.log || true", shell=True)
    escrita_log('subfinder')
    print("\033[32m"+"[+] CENSYS"+"\033[0;0m"+"\n")
    escrita_log('censys')

def nmap():

    filecsv = open('nmap.csv', 'w')
    print("\n"+"\033[32m"+"[+] NMAP"+"\033[0;0m"+"\n\n")
    for i in dic_nmap:
        print('--> '+str(i))
        subprocess.check_output("sudo nmap -sSV -Pn -T5 --script=/usr/share/nmap/scripts/firewall-bypass.nse "+i+" -oX nmap.xml >> log_nmap.txt || true", shell=True)
        tree = ET.parse('nmap.xml')
        root = tree.getroot()    
        for i in root.iter('nmaprun'):
            for j in i:
                for host in j:
                    if(host.tag == 'address'):
                        if(':' not in host.attrib['addr']):
                            dic['ip'] = host.attrib['addr']
                            dic['serveraddress'] = host.attrib['addr']
                            dic['tipo'] = host.attrib['addrtype']
                    if(host.tag == 'ports'):
                        for port in host:
                            if(port.tag == 'port'):
                                dic['porta'] = port.attrib['portid']
                                dic['protocolo'] = port.attrib['protocol']
                                for service in port:
                                    if(service.tag == 'state'):
                                        dic['status'] = service.attrib['state']
                                    if(service.tag == 'service'):
                                        dic['name'] = service.attrib['name']
                                        try:
                                            dic['product'] = service.attrib['product']
                                        except:
                                            dic['product'] = ''
                                        try:
                                            dic['version'] = service.attrib['version']
                                        except:
                                            dic['version']  = ''
                                        print(dic)
                                        filecsv.write(dic['ip']+","+dic['serveraddress']+","+dic['tipo']+","+dic['porta']+","+dic['protocolo']+","+dic['status']+","+dic['name']+","+dic['product']+","+dic['version']+"\n")
                                        print("\n> GOWITNESS")
                                        gowitness(dic['ip'],dic['porta'])
                                        print('\n------------------------------\n')
    filecsv.close()

    with open('log_nmap.txt') as file:
        for line in file:
            log_osint.write(line)

def main():
    saida = '\n###########  E n u m e r a c a o   D N S  e  BLOCOS  IPS  ###########' 
    log_osint.write(saida)
    os.system('rm -rf screenshots')
    os.system('rm -rf log_amass.json')
    try:
        enumeracao_dns(dominio)
    except:
        pass
    try:
        blocosips_escrita()
    except:
        pass
    saida = '\n########### N M A P  S C A N  ###########\n' 
    log_osint.write(saida)
    nmap()
    log_osint.close()

if __name__ == '__main__':
    main()
