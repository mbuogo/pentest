import sys
import socket
import string
import sys
import datetime
import requests
import subprocess
import os
import shutil
import uuid
import json
import time
from time import strftime
from pathlib import Path

cliente = sys.argv[1]
dir_logs = '/hunt/clientes/'+cliente+'/logs/'
ns = ''
dic_domain = {}
dic_ip = {}
domain = sys.argv[2]
scan_type = 'enumeracao'
dir_session='/hunt/clientes/'+cliente+'/session'
with open(dir_session+'/id') as x: scan_id = x.read()[:-1]
with open(dir_session+'/start') as x: scan_start = x.read()[:-1]
scanner = 'subdomain-scanner'
hora = strftime("%Y-%m-%dT%H:%M:%S%Z")
headers = {'Accept' : 'application/json', 'Content-Type' : 'application/json'}
url = 'https://10.255.51.63:9200/'+cliente+'-enum-dns/_doc?refresh'
auth=('post', '55tcLrp81sj!zmcOQ%#R&ARI#4B0gH0i9m')

try:
	r = requests.get('https://rdap.registro.br/domain/'+domain) 
	rdapsearchd = r.text  
	parse_scand = json.loads(rdapsearchd)
	for i in parse_scand['nameservers']:
		ns = ns+i['ldhName']+','
	dic_domain['ns'] = (ns[:-1]) #nameservers
	dic_domain['owner'] = parse_scand['entities'][0]['vcardArray'][1][2][3]#ownser domain
	dic_domain['responsavel'] = parse_scand['entities'][1]['vcardArray'][1][2][3]#responsavel domain
except:
	dic_domain['ns'] = ' '
	dic_domain['owner'] = ' '
	dic_domain['responsavel'] = ' '

#subprocess.check_output('/docker/kali/kali.cliente '+cliente+' /scripts/concatena_subdomain.sh || true', shell=True)#enumeracao subdominio
with open('/hunt/clientes/'+cliente+'/temp/subdomains.txt') as file:
	for line2 in file:
		try:
			subdomain = line2.rstrip('\n')
			ip = socket.gethostbyname(subdomain)
			r = requests.get('https://rdap.registro.br/ip/'+ip)
			rdapsearchd = r.text
			parse_scan = json.loads(rdapsearch)
			dic_ip['blocoip'] = parse_scan['handle'] #bloco ip
			try:
				dic_ip['asn'] = parse_scan['nicbr_autnum'] #ASN
			except:
				dic_ip['asn'] = '00000'
			dic_ip['owner'] = parse_scan['entities'][0]['vcardArray'][1][2][3] #owner bloco ip
			try:
				dic_ip['ownerid'] = parse_scan['entities'][0]['publicIds'][0]['identifier'] #ownerid bloco ip
			except:
				dic_ip['ownerid'] = '00000'
			dic_ip['responsavel'] = parse_scan['entities'][0]['entities'][0]['vcardArray'][1][2][3] #responsavelblocoip
			data = {
				"server.address": subdomain,
				"server.domain": subdomain,
				"server.ip": ip,
				"blocoip": dic_ip['blocoip'],
				"asnblocoip": dic_ip['asn'],
				"ownerblocoip": dic_ip['owner'],
				"owneridblocoip": dic_ip['ownerid'],
				"responsavelblocoip": dic_ip['responsavel'],
				"nserver": dic_domain['ns'],
				"owner": dic_domain['owner'] ,
				"responsible": dic_domain['responsavel'],
				"dns.question.registered_domain": line,
				"@timestamp": hora,
				"vulnerability.report_id": scan_id,
				"vulnerability.scanner.vendor": scanner,
				"scan.start": scan_start,
				"scan.type": scan_type
				}
			print(data)
			#print('\n')
			#r = requests.post(url, headers=headers, auth=auth, data=json.dumps(data), verify=False)
			#print (r.text)
			time.sleep(2)
		except:
			pass
