#!/usr/bin/env python3

import sys
import os
import shutil
import subprocess
import json
import re
import requests
import time
import censys.ipv4
import censys.data
import xml.etree.ElementTree as ET
from pyhunter import PyHunter

baseAPIURL = 'https://haveibeenpwned.com/api/v3/'
apikey = ''
headers_pwned = {'hibp-api-key': apikey}
urlEndpoint = 'breachedaccount/'
dominio = sys.argv[1]
dic_amass = {}
dic_rdap = {}
dic_nmap = {}
dic_nmapbloco = {}
dic_dnsrecon = {}
dic_dnsreconrecords = {}
dic_hunter = {}
dic_email = {}
dic_linkedin = {}
dic_aquatone = {}

try:
    os.remove('/home/kali/pentest/log_dnsrecon.xml')
except:
    pass

log_osint = open('log_osint.txt', 'w')

#OSINT Start Scan
print("\033[33m"+"[+] OSINT Execution"+"\033[0;0m"+"\n")

#Execucao do AMASS e do RDAP
if('log_amass.json' == True):
    os.remove('log_amass.json')

print("\033[32m"+"[+] AMASS | RDAP Execution"+"\033[0;0m"+"\n")
subprocess.check_output("sudo amass enum -ip -d "+dominio+" -brute -json log_amass.json || true", shell=True)

saida = '\n########### E n u m e r a c a o d e D N S ###########' 
log_osint.write(saida)
with open('log_amass.json') as file:
    for line in file:
        parse_amass = json.loads(line)
        dic_amass['name'] = parse_amass['name']
        #subprocess.check_output('/root/go/bin/gowitness single -F http://'+dic_amass['name']+' || true', shell=True)
        #subprocess.check_output('/root/go/bin/gowitness single -F https://'+dic_amass['name']+' || true', shell=True)
        saida = '\n\n--> Name:'+dic_amass['name']
        log_osint.write(saida)
        for x in parse_amass['addresses']:
            dic_amass['ip'] = x['ip']
            if(x['ip'] not in dic_nmap):
                dic_nmap[x['ip']] = x['ip'] 
            try:
                print("\n[+] RDAP Execution\n")
                rdap = subprocess.check_output("sudo /root/go/bin/rdap "+x['ip']+" -j || true", shell=True)
                parse_rdap = json.loads(rdap)
                dic_rdap['blocoip'] = parse_rdap['handle']
                if(dic_rdap['blocoip'] not in dic_nmapbloco):
                    dic_nmapbloco[dic_rdap['blocoip']] = dic_rdap['blocoip']
                try:
                    dic_rdap['asnblocoip'] = parse_rdap['nicbr_autnum']
                except:
                    dic_rdap['asnblocoip'] = ''
            except:
                pass
            try:
                saida = '\nIP:'+dic_amass['ip']+' BlocoIP:'+dic_rdap['blocoip']+' ASN:'+str(dic_rdap['asnblocoip'])
                log_osint.write(saida)
            except:
                pass

#rdap_domain = subprocess.check_output("sudo /root/go/bin/rdap "+dominio+" -j || true", shell=True)
#parse_rdap_domain = json.loads(rdap_domain)

for y in dic_nmapbloco:
    saida = '\n\nBlocoIP:'+y
    log_osint.write(saida)

c = censys.ipv4.CensysIPv4()

print("\033[32m"+"[+] CENSYS Execution"+"\033[0;0m"+"\n")

saida = '\n\n########### C E N S Y S ###########' 
log_osint.write(saida)

for page in c.search(sys.argv[1]):
    saida = '\n\n'+page['ip']
    log_osint.write(saida)
    if(page['ip'] not in dic_nmap):
        dic_nmap[x['ip']] = page['ip']
        try:
            rdap = subprocess.check_output("sudo /root/go/bin/rdap "+page['ip']+" -j || true", shell=True)
            parse_rdap = json.loads(rdap)
            dic_rdap['blocoip'] = parse_rdap['handle']
            if(dic_rdap['blocoip'] not in dic_nmapbloco):
                dic_nmapbloco[dic_rdap['blocoip']] = dic_rdap['blocoip']
                saida = '\n\nBlocoIP:'+dic_rdap['blocoip']
                log_osint.write(saida)
        except:
            pass

#for y in parse_rdap_domain['nameservers']:
#    saida = '\n\nNameserver:'+y['ldhName']
#    log_osint.write(saida)

#Execucao do DNSRECON
saida = '\n\n########### D N S R E C O N ###########' 
log_osint.write(saida)

if('/root/Documents/log_dnsrecon.xml' == True):
    os.remove('/root/Documents/log_dnsrecon.xml')

print("\033[32m"+"[+] DNSRECON Execution"+"\033[0;0m"+"\n")
subprocess.check_output('sudo dnsrecon --iw -a -b -g -d '+dominio+' -x /home/kali/pentest/log_dnsrecon.xml || true', shell=True)

try:
    tree = ET.parse('/home/kali/pentest/log_dnsrecon.xml')
    root = tree.getroot()

    for x in root.iter('records'):
        for y in x:
            if(y.tag == 'record'):
                if('zone_transfer' in y.attrib):
                    if(y.attrib['zone_transfer'] == 'success'):
                        dic_dnsrecon['status'] = 'Zona Aberta'
                        dic_dnsrecon['axfr'] = y.attrib['zone_transfer']
                        dic_dnsrecon['zona'] = y.attrib['ns_server']
                        saida = '\n\n--> Status da Zona:'+dic_dnsrecon['status']+' Transferenecia de Zona:'+dic_dnsrecon['axfr']+' Zona:'+dic_dnsrecon['zona']
                        log_osint.write(saida)
                if('name' in y.attrib):
                    if(y.attrib['type'] != 'info' and y.attrib['type'] != 'TXT'):
                        dic_dnsreconrecords['tipo'] = y.attrib['type']
                        dic_dnsreconrecords['name'] = y.attrib['name']
                        saida = '\nTipo :'+dic_dnsreconrecords['tipo']+' Registro:'+dic_dnsreconrecords['name']
                        log_osint.write(saida)
except:
    pass

#Execucao do SCAN EMAILS
saida = '\n\n########### E M A I L S ###########\n' 
log_osint.write(saida)

print("\033[32m"+"[+] SCAN EMAILS Execution"+"\033[0;0m"+"\n")
##Conexao com o Hunter e buscas de informacoes
hunter = PyHunter('40719a5bd9a907b3c9b204b652a9a1a770b95348')
hunter_search = hunter.domain_search(dominio)
#Parse do HUNTER
for x in hunter_search.keys():
    if(x == 'domain'):
        dic_hunter['domain'] = hunter_search.get('domain')
    if(x == 'emails'):
        emails = hunter_search.get('emails')
        for y in emails:
            e_mail = y.get('value')
            dic_hunter['email'] = e_mail
            dic_email[e_mail] = e_mail
            dic_hunter['tipo'] = y.get('type')
            if(dic_hunter['tipo'] == None):
                dic_hunter['tipo'] = ''
            dic_hunter['confianca'] = y.get('confidence')
            if(dic_hunter['confianca'] == None):
                dic_hunter['confianca'] = ''
            dic_hunter['primeiro_nome'] = y.get('first_name')
            if(dic_hunter['primeiro_nome'] == None):
                dic_hunter['primeiro_nome'] = ''
            dic_hunter['ultimo_nome'] = y.get('last_name')
            if(dic_hunter['ultimo_nome'] == None):
                dic_hunter['ultimo_nome'] = ''
            dic_hunter['cargo'] = y.get('position')
            if(dic_hunter['cargo'] == None):
                dic_hunter['cargo'] = ''
            dic_hunter['senioridade'] = y.get('seniority')
            if(dic_hunter['senioridade'] == None):
                dic_hunter['senioridade'] = ''
            dic_hunter['departamento'] = y.get('department')
            if(dic_hunter['departamento'] == None):
                dic_hunter['departamento'] = ''
            dic_hunter['linkedin'] = y.get('linkedin')
            if(dic_hunter['linkedin'] == None):
                dic_hunter['linkedin'] = ''
            dic_hunter['twittter'] = y.get('twitter')
            if(dic_hunter['twittter'] == None):
               dic_hunter['twittter'] = ''
            dic_hunter['telefone'] = y.get('phone_number')
            if(dic_hunter['telefone'] == None):
               dic_hunter['telefone'] = ''
            urlToFetch = baseAPIURL+urlEndpoint+e_mail+'?truncateResponse=false'
            r = requests.get(urlToFetch, verify=True, headers=headers_pwned)
            json_parse = str(r.text)
            try:
                json_pwned = json.loads(json_parse)
                for pwend in json_pwned:
                    dic_hunter['vulnName'] = pwend['Name']
                    dic_hunter['vulnTitle'] = pwend['Title']
                    dic_hunter['vulnBreachDate'] = str(pwend['BreachDate'])
                    dic_hunter['vulnDescription'] = str(pwend['Description'])  
            except:
                dic_hunter['vulnName'] = ''
                dic_hunter['vulnTitle'] = ''
                dic_hunter['vulnBreachDate'] = ''
                dic_hunter['vulnDescription'] = ''

            saida = '\nemail:'+dic_hunter['email']+' Vulnname:'+dic_hunter['vulnName']+' VulnTitle:'+dic_hunter['vulnTitle']+' VulnDate:'+dic_hunter['vulnBreachDate']+' VulnDesc:'+dic_hunter['vulnDescription']+'\n'
            log_osint.write(saida)

         
#Execucao do NMAP
print("\033[32m"+"[+] NMAP Execution"+"\033[0;0m"+"\n")
try:
    if('log_nmap.txt'):
        os.remove('log_nmap.txt')
except:
    pass
for nmap in dic_nmap:
    print('\nExecutando NMAP no IP - '+nmap)
    subprocess.check_output("nmap -sSV -Pn -T5 --script=/usr/share/nmap/scripts/firewall-bypass.nse "+nmap+" >> log_nmap.txt || true", shell=True)

for nmapbloco in dic_nmapbloco:
    try:
        if(int(nmapbloco.split('/')[1]) > 23):
            print('\nExecutando NMAP no Bloco - '+nmapbloco)
            subprocess.check_output("nmap -sSV -Pn -T5 --script=/usr/share/nmap/scripts/firewall-bypass.nse "+nmapbloco+" -oX nmap.xml >> log_nmap.txt || true", shell=True)
    except:
        pass
    print("\033[32m"+"[+] AQUATONE Execution"+"\033[0;0m"+"\n")
    saida = '\n\n########### A Q U A T O N E ###########\n\n' 
    log_osint.write(saida)
    os.system('cat nmap.xml | aquatone -nmap')
    with open('aquatone_session.json') as json_file:
        data = json.load(json_file)
        for p in data['pages']:
            dic_aquatone['urloriginal'] = p
            host = ((p.split(':')[1].replace('//','').replace('/','')))
            saida = '\n\n'+dic_aquatone['urloriginal']+' - '+host  
            log_osint.write(saida)

saida = '\n\n########### N M A P ###########\n\n' 
log_osint.write(saida)

with open('log_nmap.txt') as file:
    for line in file:
        saida = line 
        log_osint.write(saida)

log_osint.close()
